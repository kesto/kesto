%% -------------------------------------------------------------------
%%
%% Kesto: High Availability Monitoring Software.
%%
%% Copyright (c) 2012 Conversion Co., Ltd.  All Rights Reserved.
%% Copyright (c) 2013 Kesto Project  All Rights Reserved.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% -------------------------------------------------------------------

-module(job_recovery_test).

-include_lib("kesto_core/include/kesto_test.hrl").
-include("kesto_job.hrl").
-include_lib("kesto_core/include/kesto_core.hrl").
-include_lib("eunit/include/eunit.hrl").

-compile(export_all).

-ifdef(KESTO_JOB_TEST).
%% -define(RUN_TEST, true).
-endif.

setup() ->
	kesto_job_test_util:common_setup(?MODULE, fun configure/1).

cleanup() ->
	kesto_job_test_util:common_cleanup(?MODULE, fun configure/1).

configure(load) ->
	KVSettings = [{storage_backend, riak_kv_memory_backend},
				  {test, true},
				  {vnode_vclocks, true},
				  {pb_ip, "0.0.0.0"},
				  {pb_port, 0}, % arbitrary #
				  {map_js_vm_count, 4},
				  {reduce_js_vm_count, 3}],
	CoreSettings = [{handoff_ip, "0.0.0.0"},
					{handoff_port, 0},
					{ring_creation_size, 16}],
	KestoCoreSettings = [{put_option, [{w, 2}, {dw, 1}, return_body]},
						 {smtp, []},
						 {mail_from, ""},
						 {ssh_client_connect_timeout, 5000}],
	KestoJobSettings = [{check_interval, 10},
						{check_offset, 0},
						{ssh_exec_timeout, 86400000}],
	[ application:set_env(riak_core, K, V) || {K,V} <- CoreSettings ],
	[ application:set_env(riak_kv, K, V) || {K,V} <- KVSettings ],
	[ application:set_env(kesto_core, K, V) || {K,V} <- KestoCoreSettings ],
	[ application:set_env(kesto_job, K, V) || {K,V} <- KestoJobSettings ],
	ok;
configure(start) ->
	riak_core:wait_for_service(riak_kv),
	riak_core:wait_for_service(kesto_core),
	riak_core:wait_for_service(kesto_job);
configure(_) ->
	ok.

-ifdef(RUN_TEST).
job_test_() ->
	{foreach,
	 setup(),
	 cleanup(),
	 [
	  {timeout, 90, [fun run_recovery1/0]},
	  {timeout, 90, [fun run_recovery2/0]},
	  {timeout, 90, [fun run_recovery3/0]}
	 ]
	}.
-endif.

%% リカバリージョブテスト1
%% net1
%%   └ job1(正常終了) → job2(通常)
%%   　　└──────→ job3(リカバリ)
run_recovery1() ->
	Node1 = #node{id="node1", 
				  name="node1 name", 
				  description="node1 description", 
				  type=linux, 
				  enabled=true, 
				  ipv4=["127.0.0.1"], 
				  ipv6=[], 
				  ssh_port=22, 
				  ssh_user="kesto_test", 
				  ssh_password="kesto_test", 
				  hostname=["testhost1"], 
				  create_timestamp={{2012,6,5},{11,30,14}},
				  update_timestamp={{2012,6,5},{11,33,14}}},
	?debugVal(Node1),
	ok = kesto_core_repository:put(Node1),
	
	Net1 = #job_conf{id="net1", 
					 name="net1 name", 
					 description="net1 description", 
					 type=net, 
					 recovery=false, 
					 group_id="group1", 
					 parent_id="root", 
					 child_id=[{"group1", "job1"}, {"group1", "job2"}, {"group1", "job3"}], 
					 previous_id=[], 
					 next_id=[], 
					 info_end_value_from=0,
					 info_end_value_to=0,
					 warning_end_value_from=1, 
					 warning_end_value_to=1,
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false}},
	?debugVal(Net1),
	ok = kesto_job_conf:put(Net1),
	
	Job1 = #job_conf{id="job1", 
					 name="job1 name", 
					 description="job1 description", 
					 type=job, 
					 recovery=false, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[], 
					 next_id=[{"group1", "job2"}, {"group1", "job3"}], 
					 info_end_value_from=0,
					 info_end_value_to=0,
					 warning_end_value_from=0, 
					 warning_end_value_to=0,
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/true", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job1),
	ok = kesto_job_conf:put(Job1),
	
	Job2 = #job_conf{id="job2", 
					 name="job2 name", 
					 description="job2 description", 
					 type=job, 
					 recovery=false, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[{"group1", "job1"}], 
					 next_id=[], 
					 info_end_value_from=0,
					 info_end_value_to=0,
					 warning_end_value_from=1, 
					 warning_end_value_to=1,
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/true", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job2),
	ok = kesto_job_conf:put(Job2),
	
	Job3 = #job_conf{id="job3", 
					 name="job3 name", 
					 description="job3 description", 
					 type=job,
					 recovery=true, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[{"group1", "job1"}], 
					 next_id=[], 
					 info_end_value_from=0, 
					 info_end_value_to=0, 
					 warning_end_value_from=1, 
					 warning_end_value_to=1, 
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/true", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job3),
	ok = kesto_job_conf:put(Job3),
	
	{ok, SessionID} = kesto_job_executer:run("group1", "net1"),
	?debugVal(SessionID),
	
	?assert(job_test_util:check_session_state(SessionID, "group1", "job1", 'end', info)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "job2", 'end', info)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "job3", unexecuted, undefined)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "net1", 'end', info)),
	?assert(job_test_util:check_session_state(SessionID, 'end')),
	
	ok.

%% リカバリージョブテスト2
%% net1
%%   └ job1(異常終了) → job2(通常) → job4(通常) → job5(通常)
%%   　　└──────→ job3(リカバリ)
run_recovery2() ->
	Node1 = #node{id="node1", 
				  name="node1 name", 
				  description="node1 description", 
				  type=linux, 
				  enabled=true, 
				  ipv4=["127.0.0.1"], 
				  ipv6=[], 
				  ssh_port=22, 
				  ssh_user="kesto_test", 
				  ssh_password="kesto_test", 
				  hostname=["testhost1"], 
				  create_timestamp={{2012,6,5},{11,30,14}},
				  update_timestamp={{2012,6,5},{11,33,14}}},
	?debugVal(Node1),
	ok = kesto_core_repository:put(Node1),
	
	Net1 = #job_conf{id="net1", 
					 name="net1 name", 
					 description="net1 description", 
					 type=net, 
					 recovery=false, 
					 group_id="group1", 
					 parent_id="root", 
					 child_id=[{"group1", "job1"}, {"group1", "job2"}, {"group1", "job3"}, {"group1", "job4"}, {"group1", "job5"}], 
					 previous_id=[], 
					 next_id=[], 
					 info_end_value_from=0,
					 info_end_value_to=0,
					 warning_end_value_from=1, 
					 warning_end_value_to=1,
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false}},
	?debugVal(Net1),
	ok = kesto_job_conf:put(Net1),
	
	Job1 = #job_conf{id="job1", 
					 name="job1 name", 
					 description="job1 description", 
					 type=job, 
					 recovery=false, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[], 
					 next_id=[{"group1", "job2"}, {"group1", "job3"}], 
					 info_end_value_from=0,
					 info_end_value_to=0,
					 warning_end_value_from=0, 
					 warning_end_value_to=0,
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/false", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job1),
	ok = kesto_job_conf:put(Job1),
	
	Job2 = #job_conf{id="job2", 
					 name="job2 name", 
					 description="job2 description", 
					 type=job, 
					 recovery=false, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[{"group1", "job1"}], 
					 next_id=[{"group1", "job4"}], 
					 info_end_value_from=0,
					 info_end_value_to=0,
					 warning_end_value_from=1, 
					 warning_end_value_to=1,
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/true", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job2),
	ok = kesto_job_conf:put(Job2),
	
	Job3 = #job_conf{id="job3", 
					 name="job3 name", 
					 description="job3 description", 
					 type=job,
					 recovery=true, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[{"group1", "job1"}], 
					 next_id=[], 
					 info_end_value_from=0, 
					 info_end_value_to=0, 
					 warning_end_value_from=1, 
					 warning_end_value_to=1, 
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/true", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job3),
	ok = kesto_job_conf:put(Job3),
	
	Job4 = #job_conf{id="job4", 
					 name="job4 name", 
					 description="job4 description", 
					 type=job,
					 recovery=true, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[{"group1", "job2"}], 
					 next_id=[{"group1", "job5"}], 
					 info_end_value_from=0, 
					 info_end_value_to=0, 
					 warning_end_value_from=1, 
					 warning_end_value_to=1, 
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/true", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job4),
	ok = kesto_job_conf:put(Job4),
	
	Job5 = #job_conf{id="job5", 
					 name="job5 name", 
					 description="job5 description", 
					 type=job,
					 recovery=true, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[{"group1", "job4"}], 
					 next_id=[], 
					 info_end_value_from=0, 
					 info_end_value_to=0, 
					 warning_end_value_from=1, 
					 warning_end_value_to=1, 
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/true", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job5),
	ok = kesto_job_conf:put(Job5),
	
	{ok, SessionID} = kesto_job_executer:run("group1", "net1"),
	?debugVal(SessionID),
	
	?assert(job_test_util:check_session_state(SessionID, "group1", "job1", 'end', error)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "job2", unexecuted, undefined)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "job3", 'end', info)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "job4", unexecuted, undefined)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "job5", unexecuted, undefined)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "net1", 'end', error)),
	?assert(job_test_util:check_session_state(SessionID, 'end')),
	
	ok.

%% リカバリージョブテスト3
%% net1
%%   └ job1(異常終了) → job2(通常)
%%   　　└──────→ job3(リカバリ) → job4(通常)
%%   　　                  └──────→ job5(リカバリ)
run_recovery3() ->
	Node1 = #node{id="node1", 
				  name="node1 name", 
				  description="node1 description", 
				  type=linux, 
				  enabled=true, 
				  ipv4=["127.0.0.1"], 
				  ipv6=[], 
				  ssh_port=22, 
				  ssh_user="kesto_test", 
				  ssh_password="kesto_test", 
				  hostname=["testhost1"], 
				  create_timestamp={{2012,6,5},{11,30,14}},
				  update_timestamp={{2012,6,5},{11,33,14}}},
	?debugVal(Node1),
	ok = kesto_core_repository:put(Node1),
	
	Net1 = #job_conf{id="net1", 
					 name="net1 name", 
					 description="net1 description", 
					 type=net, 
					 recovery=false, 
					 group_id="group1", 
					 parent_id="root", 
					 child_id=[{"group1", "job1"}, {"group1", "job2"}, {"group1", "job3"}, {"group1", "job4"}, {"group1", "job5"}], 
					 previous_id=[], 
					 next_id=[], 
					 info_end_value_from=0,
					 info_end_value_to=0,
					 warning_end_value_from=1, 
					 warning_end_value_to=1,
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false}},
	?debugVal(Net1),
	ok = kesto_job_conf:put(Net1),
	
	Job1 = #job_conf{id="job1", 
					 name="job1 name", 
					 description="job1 description", 
					 type=job, 
					 recovery=false, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[], 
					 next_id=[{"group1", "job2"}, {"group1", "job3"}], 
					 info_end_value_from=0,
					 info_end_value_to=0,
					 warning_end_value_from=0, 
					 warning_end_value_to=0,
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/false", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job1),
	ok = kesto_job_conf:put(Job1),
	
	Job2 = #job_conf{id="job2", 
					 name="job2 name", 
					 description="job2 description", 
					 type=job, 
					 recovery=false, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[{"group1", "job1"}], 
					 next_id=[], 
					 info_end_value_from=0,
					 info_end_value_to=0,
					 warning_end_value_from=1, 
					 warning_end_value_to=1,
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/true", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job2),
	ok = kesto_job_conf:put(Job2),
	
	Job3 = #job_conf{id="job3", 
					 name="job3 name", 
					 description="job3 description", 
					 type=job,
					 recovery=true, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[{"group1", "job1"}], 
					 next_id=[{"group1", "job4"}, {"group1", "job5"}], 
					 info_end_value_from=0, 
					 info_end_value_to=0, 
					 warning_end_value_from=1, 
					 warning_end_value_to=1, 
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/true", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job3),
	ok = kesto_job_conf:put(Job3),
	
	Job4 = #job_conf{id="job4", 
					 name="job4 name", 
					 description="job4 description", 
					 type=job,
					 recovery=false, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[{"group1", "job3"}], 
					 next_id=[], 
					 info_end_value_from=0, 
					 info_end_value_to=0, 
					 warning_end_value_from=1, 
					 warning_end_value_to=1, 
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/true", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job4),
	ok = kesto_job_conf:put(Job4),
	
	Job5 = #job_conf{id="job5", 
					 name="job5 name", 
					 description="job5 description", 
					 type=job,
					 recovery=true, 
					 group_id="group1", 
					 parent_id="net1",
					 child_id=[], 
					 previous_id=[{"group1", "job3"}], 
					 next_id=[], 
					 info_end_value_from=0, 
					 info_end_value_to=0, 
					 warning_end_value_from=1, 
					 warning_end_value_to=1, 
					 control=#job_conf_control{calendar=false, 
											   control_skip=false, 
											   control_reserve=false, 
											   unmatch=false},
					 command=#job_conf_command{cmd_facility_id="node1", 
											   cmd_start_command="/bin/true", 
											   cmd_stop_command="/bin/true",  
											   cmd_effective_user="root", 
											   cmd_error_end_flg=false}},
	?debugVal(Job5),
	ok = kesto_job_conf:put(Job5),
	
	{ok, SessionID} = kesto_job_executer:run("group1", "net1"),
	?debugVal(SessionID),
	
	?assert(job_test_util:check_session_state(SessionID, "group1", "job1", 'end', error)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "job2", unexecuted, undefined)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "job3", 'end', info)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "job4", unexecuted, undefined)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "job5", 'end', info)),
	?assert(job_test_util:check_session_state(SessionID, "group1", "net1", 'end', error)),
	?assert(job_test_util:check_session_state(SessionID, 'end')),
	
	ok.
